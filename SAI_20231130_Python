!pip3 install pyserial

import math
import serial

MAX_POS = 65535
ARRAY_SIZE = 1000
SEND_SIZE = 500
UART_PORT = 'COM6'
BAUD_RATE = 2000000

def pack_position_data(x_pos, y_pos):
    return ((x_pos & 0xFFFF) << 16) | (y_pos & 0xFFFF)

def generate_sine_position_data(array_size):
    position_data_array = []
    for i in range(array_size):
        x = int(MAX_POS * math.sin(1.0 * math.pi * i / array_size)) & 0xFFFF
        y = int(MAX_POS * math.sin(1.0 * math.pi * i / array_size)) & 0xFFFF
        position_data_array.append(pack_position_data(x, y))
    return position_data_array

def generate_step_position_data(step, array_size):
    position_data_array = []
    for i in range(1, array_size + 1):
        x = step * i
        y = step * i
        position_data_array.append(pack_position_data(x, y))
    return position_data_array

# Generate data
sine_position_data = generate_sine_position_data(ARRAY_SIZE)
step_position_Data = generate_step_position_data(65, ARRAY_SIZE)

# UART setup
ser = serial.Serial(UART_PORT, BAUD_RATE, timeout=1)

import time
import struct
binary_data1 = b''.join(struct.pack('<I', data) for data in step_position_Data[0:500])
binary_data2 = b''.join(struct.pack('<I', data) for data in step_position_Data[500:1000])
binary_data3 = b''.join(struct.pack('<I', data) for data in sine_position_data[0:500])
binary_data4 = b''.join(struct.pack('<I', data) for data in sine_position_data[500:1000])

ser.reset_input_buffer()

while True:
    if ser.in_waiting > 0:
        start_time = time.time()
        received_data = ser.readline().decode().strip()

        # Fixed the condition check in the if statement
        if (received_data.lower() == "4"):
            ser.write(binary_data1)
        elif (received_data.lower() == "1"):
            ser.write(binary_data2)
        elif (received_data.lower() == "2"):
            ser.write(binary_data3)
        elif (received_data.lower() == "3"):
            ser.write(binary_data4)
        end_time = time.time()
        print(end_time - start_time)
ser.close()
